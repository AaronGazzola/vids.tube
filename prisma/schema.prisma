// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id        String   @id @default(cuid())
  userId    String
  videoId   String
  videoUrl  String
  clips     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  jobs      ProcessingJob[]
  videos    Video[]
}

model ProcessingJob {
  id              String    @id @default(cuid())
  projectId       String
  project         Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  status          JobStatus @default(PENDING)
  currentStep     String?
  progress        Int       @default(0)
  totalSteps      Int       @default(0)
  currentClip     Int       @default(0)
  totalClips      Int       @default(0)
  outputUrl       String?
  error           String?
  createdAt       DateTime  @default(now())
  completedAt     DateTime?
}

model Video {
  id            String      @id @default(cuid())
  youtubeId     String      @unique
  sourceUrl     String
  storageUrl    String?
  storageKey    String?
  thumbnailUrl  String?
  thumbnailKey  String?
  duration      Float?
  fileSize      BigInt?
  resolution    String?
  downloadedAt  DateTime?
  lastUsedAt    DateTime    @default(now())
  projects      Project[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

enum JobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}
